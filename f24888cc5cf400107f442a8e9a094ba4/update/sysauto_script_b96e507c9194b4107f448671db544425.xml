<?xml version="1.0" encoding="UTF-8"?><record_update table="sysauto_script">
    <sysauto_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <business_calendar/>
        <condition/>
        <conditional>false</conditional>
        <entered_time>1970-01-01 00:00:00</entered_time>
        <name>CL: Health Check</name>
        <offset/>
        <offset_type/>
        <run_as display_value="Training Admin">fcff760460d632007f44c64fabb13188</run_as>
        <run_as_tz/>
        <run_dayofmonth>1</run_dayofmonth>
        <run_dayofweek>1</run_dayofweek>
        <run_period>1970-01-01 00:30:15</run_period>
        <run_start>2021-05-20 19:55:54</run_start>
        <run_time>1970-01-01 00:00:00</run_time>
        <run_type>periodically</run_type>
        <script><![CDATA[var ip = '';
var instanceID = '';
var manHost = gs.getProperty('cl.management.host');
var instance_configurator = gs.getProperty('instance_configurator');
var dcInstance = gs.getProperty('cl.datacenter_instance');
var instanceSysid = gs.getProperty('instance_id');
var activeUsers = parseInt(gs.getProperty('cl.activeUsers', 1));
var uptime = gs.getProperty('cl.uptime', 0);
var hibernationBypass = gs.getProperty('cl.hibernationBypass', false);
var hibernationTimeout = parseInt(gs.getProperty('cl.hibernationTimeout', 4));
var reboot = gs.getProperty('x_snc_lab_man.cl.reboot', false);

// Set Health Script Status so the local OS scripts will not also do a health check
gs.setProperty('x_snc_lab_man.cl.LabManHealth', true);

// If this is AWS, we go and get the current public IP that is on this system
var request = new sn_ws.RESTMessageV2();
request.setHttpMethod('get');
request.setEndpoint('http://169.254.169.254/latest/meta-data/public-ipv4');
var response = request.execute();
var httpResponseStatus = response.getStatusCode();
if (httpResponseStatus == '200') {
    ip = response.getBody();
} else {
    ip = 'NA';
}

// If this is AWS, get AWS Instance ID
if (dcInstance == 'false') {
    var request = new sn_ws.RESTMessageV2();
    request.setHttpMethod('get');
    request.setEndpoint('http://169.254.169.254/latest/meta-data/instance-id');
    var response = request.execute();
    var httpResponseStatus = response.getStatusCode();
    if (httpResponseStatus == '200') {
        instanceID = response.getBody();
    } else {
        instanceID = gs.getProperty('instance_id');
    }
} else {
    instanceID = gs.getProperty('instance_id');
}

// Calculate uptime from milliseconds to hours
uptime = uptime / 3600000;

// Set up Cloud Labs Health Call
var request = new sn_ws.RESTMessageV2();
request.setEndpoint('https://' + manHost + '.service-now.com/api/snc/v1/cloudlabs_health_rest_api/update/health');
request.setHttpMethod('POST');
request.setRequestHeader("Accept", "application/json");

// Build Payload
var instanceData = {};
instanceData.ip = ip;
instanceData.status = 'Running';
instanceData.id = instanceID;
instanceData.lastActivity = uptime;
instanceData.activeUsers = activeUsers;
instanceData = JSON.stringify(instanceData);

// gs.info(instanceData);

// Make up Cloud Labs Health Call
request.setRequestBody(instanceData);
var response = request.execute();
var body = response.getBody();
var data = JSON.parse(body);

// Take the returned JSON and store it
gs.setProperty('x_snc_lab_man.cl.LabManHealthData', body);

// If there is a remote function, set the property with it
if (data.remote_function != ''){
	if (data.remote_function == 'Reset SN Passwords'){
		data.remote_function = 'reset_password';
	}
	gs.setProperty('x_snc_lab_man.cl.remote_function', data.remote_function);
}

// Recalculate new run time for scheduled job adding in up to a random 2.5 minutes
var recGR = new GlideRecord('sysauto');
recGR.addQuery('name', 'CL: Health Check');
recGR.query();

while (recGR.next()) {
    var dur = parseInt(data.interval) + Math.floor(Math.random() * 150);

    var h = Math.floor(dur / 3600);
    var m = Math.floor(dur % 3600 / 60);
    var s = Math.floor(dur % 3600 % 60);
    h = pad(h, 2);
    m = pad(m, 2);
    s = pad(s, 2);
    var duration = h + ':' + m + ':' + s;

    duration = new GlideDuration(duration);
    recGR.run_period = duration;
    recGR.update();
}

function pad(n, width, z) {
    z = z || '0';
    n = n + '';
    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}

// Decide if we need to hibernate or not
if (reboot == "false") {
    if (hibernationTimeout < uptime && hibernationBypass == 'false') {
        if (instance_configurator == 'Complete' && dcInstance == 'false' && activeUsers <= 0) {
            // Call Hibernation
            gs.setProperty('x_snc_lab_man.cl.reboot', true);
            var hRequest = new sn_ws.RESTMessageV2();
            hRequest.setEndpoint('https://' + manHost + '.service-now.com/api/snc/lab_management/hibernateInstance');
            hRequest.setHttpMethod('POST');
            hRequest.setRequestHeader("Accept", "application/json");
            hRequest.setRequestBody("{\"instanceSysid\":\"" + instanceSysid + "\"}");
            var hResponse = hRequest.execute();
        }
    }
} else {
    gs.setProperty('x_snc_lab_man.cl.reboot', false);
}]]></script>
        <sys_class_name>sysauto_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-05-20 19:56:02</sys_created_on>
        <sys_id>b96e507c9194b4107f448671db544425</sys_id>
        <sys_mod_count>4449</sys_mod_count>
        <sys_name>CL: Health Check</sys_name>
        <sys_package display_value="Lab Management" source="x_snc_lab_man">f24888cc5cf400107f442a8e9a094ba4</sys_package>
        <sys_policy/>
        <sys_scope display_value="Lab Management">f24888cc5cf400107f442a8e9a094ba4</sys_scope>
        <sys_update_name>sysauto_script_b96e507c9194b4107f448671db544425</sys_update_name>
        <sys_updated_by>trainingadmin</sys_updated_by>
        <sys_updated_on>2022-02-23 16:05:38</sys_updated_on>
        <time_zone/>
        <upgrade_safe>false</upgrade_safe>
    </sysauto_script>
</record_update>
